<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.7"/>
    <errors>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;mRunning&apos; is always true" verbose="Condition &apos;mRunning&apos; is always true" cwe="571" file0="Components/BinderSrv/BinderManager.cpp">
            <location file="Components/BinderSrv/BinderManager.cpp" line="128" column="12" info="Condition &apos;mRunning&apos; is always true"/>
            <location file="Components/BinderSrv/BinderManager.cpp" line="127" column="16" info="Assignment &apos;mRunning=true&apos;, assigned value is 1"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;len&apos; is less than zero." verbose="The unsigned expression &apos;len&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" file0="Components/BinderSrv/Library/Parcel.cpp">
            <location file="Components/BinderSrv/Library/Parcel.cpp" line="143" column="25" info="Unsigned less than zero"/>
            <symbol>len</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;len&apos; is less than zero." verbose="The unsigned expression &apos;len&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" file0="Components/BinderSrv/Library/Parcel.cpp">
            <location file="Components/BinderSrv/Library/Parcel.cpp" line="169" column="25" info="Unsigned less than zero"/>
            <symbol>len</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;mLogsDirPath&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;mLogsDirPath&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="Components/LogManagerSrv/LogManager.cpp">
            <location file="Components/LogManagerSrv/LogManager.cpp" line="54" column="5"/>
            <symbol>mLogsDirPath</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;mBaseLogFile&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;mBaseLogFile&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="Components/LogManagerSrv/LogManager.cpp">
            <location file="Components/LogManagerSrv/LogManager.cpp" line="55" column="5"/>
            <symbol>mBaseLogFile</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;mCurrentLogFile&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;mCurrentLogFile&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="Components/LogManagerSrv/LogManager.cpp">
            <location file="Components/LogManagerSrv/LogManager.cpp" line="56" column="5"/>
            <symbol>mCurrentLogFile</symbol>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="Components/PowerManagerSrv/PowerManager.cpp">
            <location file="Components/PowerManagerSrv/PowerManager.cpp" line="65" column="9"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;ConnectMediator&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;ConnectMediator&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="Core/SprMediatorIpcProxy.cpp">
            <location file="Core/SprMediatorIpcProxy.h" line="41" column="9" info="Function in derived class"/>
            <location file="Core/SprMediatorProxy.h" line="34" column="17" info="Virtual function in base class"/>
            <symbol>ConnectMediator</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="Core/SprMsg.cpp">
            <location file="Core/SprMsg.cpp" line="188" column="18"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="Core/SprTimerManager.cpp">
            <location file="Core/SprTimerManager.cpp" line="219" column="13"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;DumpPidMapInfo&apos; is never used." verbose="The function &apos;DumpPidMapInfo&apos; is never used." cwe="561">
            <location file="Components/ServiceManagerSrv/ServiceManager.cpp" line="244" column="0"/>
            <symbol>DumpPidMapInfo</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;GetCurTimeStr&apos; is never used." verbose="The function &apos;GetCurTimeStr&apos; is never used." cwe="561">
            <location file="Util/GeneralUtils.cpp" line="89" column="0"/>
            <symbol>GetCurTimeStr</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;IsWriteable&apos; is never used." verbose="The function &apos;IsWriteable&apos; is never used." cwe="561">
            <location file="Util/SharedRingBuffer.cpp" line="201" column="0"/>
            <symbol>IsWriteable</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;NextExpireTimes&apos; is never used." verbose="The function &apos;NextExpireTimes&apos; is never used." cwe="561">
            <location file="Core/SprTimerManager.cpp" line="166" column="0"/>
            <symbol>NextExpireTimes</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;PrintRealTime&apos; is never used." verbose="The function &apos;PrintRealTime&apos; is never used." cwe="561">
            <location file="Core/SprTimerManager.cpp" line="125" column="0"/>
            <symbol>PrintRealTime</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ReadBool&apos; is never used." verbose="The function &apos;ReadBool&apos; is never used." cwe="561">
            <location file="Components/BinderSrv/Library/Parcel.cpp" line="74" column="0"/>
            <symbol>ReadBool</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ReadData&apos; is never used." verbose="The function &apos;ReadData&apos; is never used." cwe="561">
            <location file="Components/BinderSrv/Library/Parcel.cpp" line="164" column="0"/>
            <symbol>ReadData</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;RemoveService&apos; is never used." verbose="The function &apos;RemoveService&apos; is never used." cwe="561">
            <location file="Components/BinderSrv/Library/IBinderManager.cpp" line="74" column="0"/>
            <symbol>RemoveService</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SetFrom&apos; is never used." verbose="The function &apos;SetFrom&apos; is never used." cwe="561">
            <location file="Core/SprMsg.cpp" line="199" column="0"/>
            <symbol>SetFrom</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SetMsgId&apos; is never used." verbose="The function &apos;SetMsgId&apos; is never used." cwe="561">
            <location file="Core/SprMsg.cpp" line="209" column="0"/>
            <symbol>SetMsgId</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SetTo&apos; is never used." verbose="The function &apos;SetTo&apos; is never used." cwe="561">
            <location file="Core/SprMsg.cpp" line="204" column="0"/>
            <symbol>SetTo</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SetU32Vec&apos; is never used." verbose="The function &apos;SetU32Vec&apos; is never used." cwe="561">
            <location file="Core/SprMsg.cpp" line="251" column="0"/>
            <symbol>SetU32Vec</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SetU8Vec&apos; is never used." verbose="The function &apos;SetU8Vec&apos; is never used." cwe="561">
            <location file="Core/SprMsg.cpp" line="244" column="0"/>
            <symbol>SetU8Vec</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SystemCmd&apos; is never used." verbose="The function &apos;SystemCmd&apos; is never used." cwe="561">
            <location file="Util/GeneralUtils.cpp" line="37" column="0"/>
            <symbol>SystemCmd</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;WriteBool&apos; is never used." verbose="The function &apos;WriteBool&apos; is never used." cwe="561">
            <location file="Components/BinderSrv/Library/Parcel.cpp" line="59" column="0"/>
            <symbol>WriteBool</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;WriteData&apos; is never used." verbose="The function &apos;WriteData&apos; is never used." cwe="561">
            <location file="Components/BinderSrv/Library/Parcel.cpp" line="154" column="0"/>
            <symbol>WriteData</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config."/>
    </errors>
</results>
